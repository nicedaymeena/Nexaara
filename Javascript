// NEXAARA E-commerce Website JavaScript

// Sample data initialization
const initialProducts = [
    {
        id: 1,
        name: "NEXAARA Classic Black T-Shirt",
        price: 499,
        category: "T-Shirts",
        image: "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400",
        description: "Premium quality cotton t-shirt with NEXAARA logo"
    },
    {
        id: 2,
        name: "NEXAARA Premium Hoodie",
        price: 1299,
        category: "Hoodies", 
        image: "https://images.unsplash.com/photo-1556821840-3a9c6c1a0e8f?w=400",
        description: "Comfortable hoodie perfect for casual wear"
    },
    {
        id: 3,
        name: "NEXAARA White T-Shirt",
        price: 449,
        category: "T-Shirts",
        image: "https://images.unsplash.com/photo-1527719327859-c6ce80353573?w=400", 
        description: "Clean white cotton t-shirt with minimalist design"
    },
    {
        id: 4,
        name: "NEXAARA Coffee Mug",
        price: 299,
        category: "Accessories",
        image: "https://images.unsplash.com/photo-1514228742587-6b1558fcf93a?w=400",
        description: "Ceramic mug with NEXAARA branding"
    },
    {
        id: 5,
        name: "NEXAARA Phone Case",
        price: 399,
        category: "Accessories", 
        image: "https://images.unsplash.com/photo-1556656793-08538906a9f8?w=400",
        description: "Durable phone case with premium finish"
    },
    {
        id: 6,
        name: "NEXAARA Gray Hoodie",
        price: 1199,
        category: "Hoodies",
        image: "https://images.unsplash.com/photo-1556821840-3a9c6c1a0e8f?w=400",
        description: "Stylish gray hoodie for everyday comfort"
    }
];

const adminCredentials = {
    email: "admin@nexaara.com",
    password: "admin123"
};

// Data Management
class DataManager {
    constructor() {
        this.initializeData();
    }

    initializeData() {
        // Initialize products if not exists
        if (!localStorage.getItem('nexaaraProducts')) {
            localStorage.setItem('nexaaraProducts', JSON.stringify(initialProducts));
        }
        
        // Initialize other data structures
        if (!localStorage.getItem('nexaaraUsers')) {
            localStorage.setItem('nexaaraUsers', JSON.stringify([]));
        }
        
        if (!localStorage.getItem('nexaaraOrders')) {
            localStorage.setItem('nexaaraOrders', JSON.stringify([]));
        }
        
        if (!localStorage.getItem('nexaaraCart')) {
            localStorage.setItem('nexaaraCart', JSON.stringify([]));
        }
        
        if (!localStorage.getItem('nexaaraCurrentUser')) {
            localStorage.setItem('nexaaraCurrentUser', JSON.stringify(null));
        }
        
        if (!localStorage.getItem('nexaaraNextProductId')) {
            localStorage.setItem('nexaaraNextProductId', JSON.stringify(7));
        }
        
        if (!localStorage.getItem('nexaaraNextOrderId')) {
            localStorage.setItem('nexaaraNextOrderId', JSON.stringify(1));
        }
    }

    // Products
    getProducts() {
        return JSON.parse(localStorage.getItem('nexaaraProducts') || '[]');
    }

    setProducts(products) {
        localStorage.setItem('nexaaraProducts', JSON.stringify(products));
    }

    addProduct(product) {
        const products = this.getProducts();
        const nextId = JSON.parse(localStorage.getItem('nexaaraNextProductId') || '7');
        product.id = nextId;
        products.push(product);
        this.setProducts(products);
        localStorage.setItem('nexaaraNextProductId', JSON.stringify(nextId + 1));
        return product;
    }

    deleteProduct(id) {
        const products = this.getProducts().filter(p => p.id !== id);
        this.setProducts(products);
    }

    getProductById(id) {
        return this.getProducts().find(p => p.id === parseInt(id));
    }

    // Users
    getUsers() {
        return JSON.parse(localStorage.getItem('nexaaraUsers') || '[]');
    }

    addUser(user) {
        const users = this.getUsers();
        users.push(user);
        localStorage.setItem('nexaaraUsers', JSON.stringify(users));
    }

    getUserByEmail(email) {
        return this.getUsers().find(u => u.email === email);
    }

    // Current User
    getCurrentUser() {
        return JSON.parse(localStorage.getItem('nexaaraCurrentUser'));
    }

    setCurrentUser(user) {
        localStorage.setItem('nexaaraCurrentUser', JSON.stringify(user));
    }

    logout() {
        localStorage.setItem('nexaaraCurrentUser', JSON.stringify(null));
        localStorage.setItem('nexaaraCart', JSON.stringify([]));
    }

    // Cart
    getCart() {
        return JSON.parse(localStorage.getItem('nexaaraCart') || '[]');
    }

    setCart(cart) {
        localStorage.setItem('nexaaraCart', JSON.stringify(cart));
    }

    addToCart(productId, quantity = 1) {
        const cart = this.getCart();
        const existingItem = cart.find(item => item.productId === productId);
        
        if (existingItem) {
            existingItem.quantity += quantity;
        } else {
            cart.push({ productId, quantity });
        }
        
        this.setCart(cart);
        return cart;
    }

    removeFromCart(productId) {
        const cart = this.getCart().filter(item => item.productId !== productId);
        this.setCart(cart);
        return cart;
    }

    updateCartQuantity(productId, quantity) {
        const cart = this.getCart();
        const item = cart.find(item => item.productId === productId);
        if (item) {
            item.quantity = quantity;
            this.setCart(cart);
        }
        return cart;
    }

    clearCart() {
        this.setCart([]);
    }

    // Orders
    getOrders() {
        return JSON.parse(localStorage.getItem('nexaaraOrders') || '[]');
    }

    addOrder(order) {
        const orders = this.getOrders();
        const nextId = JSON.parse(localStorage.getItem('nexaaraNextOrderId') || '1');
        order.id = nextId;
        order.date = new Date().toISOString();
        orders.push(order);
        localStorage.setItem('nexaaraOrders', JSON.stringify(orders));
        localStorage.setItem('nexaaraNextOrderId', JSON.stringify(nextId + 1));
        return order;
    }
}

// Application Manager
class NexaaraApp {
    constructor() {
        this.dataManager = new DataManager();
        this.currentPage = 'homepage';
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.updateCartCount();
        this.showPage('homepage');
        this.renderFeaturedProducts();
        this.checkAuthState();
        this.setupKeyboardEvents();
    }

    setupEventListeners() {
        // Navigation
        document.getElementById('loginBtn').addEventListener('click', () => {
            if (this.dataManager.getCurrentUser()) {
                this.dataManager.logout();
                this.updateAuthUI();
                this.showPage('homepage');
                this.showMessage('à¤¸à¤«à¤²à¤¤à¤¾à¤ªà¥‚à¤°à¥à¤µà¤• à¤²à¥‰à¤—à¤†à¤‰à¤Ÿ à¤¹à¥‹ à¤—à¤', 'success');
            } else {
                this.showPage('loginPage');
            }
        });

        document.getElementById('cartBtn').addEventListener('click', () => {
            this.showPage('cartPage');
            this.renderCart();
        });

        document.getElementById('shopNowBtn').addEventListener('click', () => {
            this.showPage('productsPage');
            this.renderProducts();
        });

        // Search functionality
        document.getElementById('searchBtn').addEventListener('click', () => {
            this.performSearch();
        });

        document.getElementById('searchInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.performSearch();
            }
        });

        // Category cards
        document.querySelectorAll('.category-card').forEach(card => {
            card.addEventListener('click', () => {
                const category = card.dataset.category;
                this.showPage('productsPage');
                this.renderProducts(category);
            });
        });

        // Auth forms
        document.getElementById('loginForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleLogin();
        });

        document.getElementById('signupForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSignup();
        });

        document.getElementById('showSignup').addEventListener('click', (e) => {
            e.preventDefault();
            this.showPage('signupPage');
        });

        document.getElementById('showLogin').addEventListener('click', (e) => {
            e.preventDefault();
            this.showPage('loginPage');
        });

        document.getElementById('adminLoginLink').addEventListener('click', (e) => {
            e.preventDefault();
            this.showAdminLoginForm();
        });

        // Product filters
        document.getElementById('categoryFilter').addEventListener('change', () => {
            this.renderProducts();
        });

        document.getElementById('sortFilter').addEventListener('change', () => {
            this.renderProducts();
        });

        // Checkout
        document.getElementById('checkoutBtn').addEventListener('click', () => {
            if (!this.dataManager.getCurrentUser()) {
                this.showMessage('à¤•à¥ƒà¤ªà¤¯à¤¾ à¤ªà¤¹à¤²à¥‡ à¤²à¥‰à¤—à¤¿à¤¨ à¤•à¤°à¥‡à¤‚', 'error');
                this.showPage('loginPage');
                return;
            }
            this.showPage('checkoutPage');
            this.showCheckoutStep('customerInfoStep');
        });

        document.getElementById('customerInfoForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.showCheckoutStep('paymentStep');
            this.renderOrderSummary();
        });

        document.getElementById('upiForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.processPayment();
        });

        // Admin functionality
        document.getElementById('addProductBtn').addEventListener('click', () => {
            this.showModal('addProductModal');
        });

        document.getElementById('addProductForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleAddProduct();
        });

        document.getElementById('closeModal').addEventListener('click', () => {
            this.hideModal('addProductModal');
        });

        // Admin navigation
        document.querySelectorAll('.admin-nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                if (link.id === 'adminLogout') {
                    this.dataManager.logout();
                    this.updateAuthUI();
                    this.showPage('homepage');
                    this.showMessage('à¤à¤¡à¤®à¤¿à¤¨ à¤²à¥‰à¤—à¤†à¤‰à¤Ÿ à¤¸à¤«à¤²', 'success');
                    return;
                }
                
                const section = link.dataset.section;
                if (section) {
                    this.showAdminSection(section);
                }
            });
        });

        // Modal close functionality
        document.addEventListener('click', (e) => {
            const modal = document.querySelector('.modal:not(.hidden)');
            if (modal && e.target === modal) {
                this.hideModal(modal.id);
            }
        });
    }

    setupKeyboardEvents() {
        document.addEventListener('keydown', (e) => {
            // Close modal with Escape key
            if (e.key === 'Escape') {
                const modal = document.querySelector('.modal:not(.hidden)');
                if (modal) {
                    this.hideModal(modal.id);
                }
            }

            // Go back to homepage with Home key
            if (e.key === 'Home' && !e.target.matches('input, textarea')) {
                this.showPage('homepage');
            }
        });
    }

    showPage(pageId) {
        // Hide all pages
        document.querySelectorAll('.page').forEach(page => {
            page.classList.remove('active');
        });
        
        // Show selected page
        document.getElementById(pageId).classList.add('active');
        this.currentPage = pageId;
        
        // Load page-specific content
        if (pageId === 'productsPage') {
            this.renderProducts();
        } else if (pageId === 'adminDashboard') {
            this.renderAdminDashboard();
        }

        // Scroll to top when changing pages
        window.scrollTo(0, 0);
    }

    performSearch() {
        const query = document.getElementById('searchInput').value.toLowerCase().trim();
        if (query) {
            this.showPage('productsPage');
            this.renderProducts(null, query);
        }
    }

    renderFeaturedProducts() {
        const container = document.getElementById('featuredProductsGrid');
        const products = this.dataManager.getProducts().slice(0, 6);
        this.renderProductGrid(container, products);
    }

    renderProducts(categoryFilter = null, searchQuery = null) {
        const container = document.getElementById('productsGrid');
        let products = this.dataManager.getProducts();

        // Apply category filter
        const categorySelect = document.getElementById('categoryFilter');
        const selectedCategory = categoryFilter || categorySelect?.value;
        if (selectedCategory) {
            products = products.filter(p => p.category === selectedCategory);
            // Update the filter dropdown to reflect the selection
            if (categorySelect) {
                categorySelect.value = selectedCategory;
            }
        }

        // Apply search filter
        if (searchQuery) {
            products = products.filter(p => 
                p.name.toLowerCase().includes(searchQuery) ||
                p.description.toLowerCase().includes(searchQuery)
            );
        }

        // Apply sorting
        const sortSelect = document.getElementById('sortFilter');
        const sortBy = sortSelect?.value || 'name';
        products = this.sortProducts(products, sortBy);

        this.renderProductGrid(container, products);

        if (products.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>à¤•à¥‹à¤ˆ à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤¨à¤¹à¥€à¤‚ à¤®à¤¿à¤²à¤¾</h3>
                    <p>à¤•à¥ƒà¤ªà¤¯à¤¾ à¤…à¤ªà¤¨à¤¾ à¤–à¥‹à¤œ à¤¯à¤¾ à¤«à¤¿à¤²à¥à¤Ÿà¤° à¤¬à¤¦à¤²à¥‡à¤‚</p>
                    <button class="btn btn--primary" onclick="app.showPage('homepage')">
                        à¤¹à¥‹à¤®à¤ªà¥‡à¤œ à¤ªà¤° à¤µà¤¾à¤ªà¤¸ à¤œà¤¾à¤à¤‚
                    </button>
                </div>
            `;
        }
    }

    renderProductGrid(container, products) {
        container.innerHTML = products.map(product => `
            <div class="product-card" onclick="app.showProductDetail(${product.id})">
                <img src="${product.image}" alt="${product.name}" class="product-image" loading="lazy">
                <div class="product-info">
                    <h3 class="product-name">${product.name}</h3>
                    <p class="product-price">â‚¹${product.price}</p>
                    <p class="product-description">${product.description}</p>
                    <button class="btn btn--primary" onclick="event.stopPropagation(); app.addToCart(${product.id})">
                        à¤•à¤¾à¤°à¥à¤Ÿ à¤®à¥‡à¤‚ à¤œà¥‹à¤¡à¤¼à¥‡à¤‚
                    </button>
                </div>
            </div>
        `).join('');
    }

    sortProducts(products, sortBy) {
        switch (sortBy) {
            case 'price-low':
                return products.sort((a, b) => a.price - b.price);
            case 'price-high':
                return products.sort((a, b) => b.price - a.price);
            case 'name':
            default:
                return products.sort((a, b) => a.name.localeCompare(b.name));
        }
    }

    showProductDetail(productId) {
        const product = this.dataManager.getProductById(productId);
        if (!product) return;

        const container = document.getElementById('productDetail');
        container.innerHTML = `
            <div>
                <img src="${product.image}" alt="${product.name}" class="product-detail-image">
            </div>
            <div class="product-detail-info">
                <h1>${product.name}</h1>
                <p class="product-detail-price">â‚¹${product.price}</p>
                <p class="product-detail-description">${product.description}</p>
                <div class="quantity-selector">
                    <span>à¤®à¤¾à¤¤à¥à¤°à¤¾:</span>
                    <button class="quantity-btn" onclick="app.decreaseQuantity()">-</button>
                    <input type="number" id="productQuantity" class="quantity-input form-control" value="1" min="1" max="10">
                    <button class="quantity-btn" onclick="app.increaseQuantity()">+</button>
                </div>
                <button class="btn btn--primary btn--lg" onclick="app.addToCartWithQuantity(${product.id})">
                    à¤•à¤¾à¤°à¥à¤Ÿ à¤®à¥‡à¤‚ à¤œà¥‹à¤¡à¤¼à¥‡à¤‚
                </button>
                <button class="btn btn--outline btn--lg" onclick="app.showPage('productsPage')">
                    à¤µà¤¾à¤ªà¤¸ à¤‰à¤¤à¥à¤ªà¤¾à¤¦à¥‹à¤‚ à¤ªà¤° à¤œà¤¾à¤à¤‚
                </button>
            </div>
        `;

        this.showPage('productDetailPage');
    }

    increaseQuantity() {
        const input = document.getElementById('productQuantity');
        const current = parseInt(input.value);
        if (current < 10) {
            input.value = current + 1;
        }
    }

    decreaseQuantity() {
        const input = document.getElementById('productQuantity');
        const current = parseInt(input.value);
        if (current > 1) {
            input.value = current - 1;
        }
    }

    addToCart(productId, quantity = 1) {
        this.dataManager.addToCart(productId, quantity);
        this.updateCartCount();
        this.showMessage('à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤•à¤¾à¤°à¥à¤Ÿ à¤®à¥‡à¤‚ à¤œà¥‹à¤¡à¤¼à¤¾ à¤—à¤¯à¤¾', 'success');
    }

    addToCartWithQuantity(productId) {
        const quantity = parseInt(document.getElementById('productQuantity').value);
        this.addToCart(productId, quantity);
    }

    updateCartCount() {
        const cart = this.dataManager.getCart();
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        const countElement = document.getElementById('cartCount');
        countElement.textContent = totalItems;
        
        if (totalItems > 0) {
            countElement.parentElement.classList.add('cart-count-animate');
            setTimeout(() => {
                countElement.parentElement.classList.remove('cart-count-animate');
            }, 300);
        }
    }

    renderCart() {
        const container = document.getElementById('cartItems');
        const cart = this.dataManager.getCart();
        const products = this.dataManager.getProducts();

        if (cart.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>à¤†à¤ªà¤•à¤¾ à¤•à¤¾à¤°à¥à¤Ÿ à¤–à¤¾à¤²à¥€ à¤¹à¥ˆ</h3>
                    <p>à¤•à¥à¤› à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤œà¥‹à¤¡à¤¼à¥‡à¤‚</p>
                    <button class="btn btn--primary" onclick="app.showPage('productsPage')">
                        à¤–à¤°à¥€à¤¦à¤¾à¤°à¥€ à¤•à¤°à¥‡à¤‚
                    </button>
                </div>
            `;
            document.getElementById('cartSummary').style.display = 'none';
            return;
        }

        let total = 0;
        const cartHTML = cart.map(item => {
            const product = products.find(p => p.id === item.productId);
            if (!product) return '';
            
            const itemTotal = product.price * item.quantity;
            total += itemTotal;

            return `
                <div class="cart-item">
                    <img src="${product.image}" alt="${product.name}" class="cart-item-image">
                    <div class="cart-item-info">
                        <h4 class="cart-item-name">${product.name}</h4>
                        <p class="cart-item-price">â‚¹${product.price} x ${item.quantity} = â‚¹${itemTotal}</p>
                    </div>
                    <div class="cart-item-controls">
                        <div class="cart-item-quantity">
                            <button class="btn btn--sm btn--outline" onclick="app.updateCartItem(${product.id}, ${item.quantity - 1})">-</button>
                            <span>${item.quantity}</span>
                            <button class="btn btn--sm btn--outline" onclick="app.updateCartItem(${product.id}, ${item.quantity + 1})">+</button>
                        </div>
                        <button class="btn btn--sm btn--danger" onclick="app.removeFromCart(${product.id})">à¤¹à¤Ÿà¤¾à¤à¤‚</button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = cartHTML;
        document.getElementById('cartTotal').textContent = total;
        document.getElementById('cartSummary').style.display = 'block';
    }

    updateCartItem(productId, newQuantity) {
        if (newQuantity <= 0) {
            this.removeFromCart(productId);
        } else {
            this.dataManager.updateCartQuantity(productId, newQuantity);
            this.updateCartCount();
            this.renderCart();
        }
    }

    removeFromCart(productId) {
        this.dataManager.removeFromCart(productId);
        this.updateCartCount();
        this.renderCart();
        this.showMessage('à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤•à¤¾à¤°à¥à¤Ÿ à¤¸à¥‡ à¤¹à¤Ÿà¤¾à¤¯à¤¾ à¤—à¤¯à¤¾', 'success');
    }

    handleLogin() {
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;

        // Check admin credentials first
        if (email === adminCredentials.email && password === adminCredentials.password) {
            this.dataManager.setCurrentUser({ name: 'Admin', email, isAdmin: true });
            this.updateAuthUI();
            this.showPage('adminDashboard');
            this.showMessage('à¤à¤¡à¤®à¤¿à¤¨ à¤²à¥‰à¤—à¤¿à¤¨ à¤¸à¤«à¤²', 'success');
            return;
        }

        // Check regular user credentials
        const user = this.dataManager.getUserByEmail(email);
        if (user && user.password === password) {
            this.dataManager.setCurrentUser(user);
            this.updateAuthUI();
            this.showPage('homepage');
            this.showMessage(`à¤¸à¥à¤µà¤¾à¤—à¤¤ à¤¹à¥ˆ, ${user.name}!`, 'success');
        } else {
            this.showMessage('à¤—à¤²à¤¤ à¤ˆà¤®à¥‡à¤² à¤¯à¤¾ à¤ªà¤¾à¤¸à¤µà¤°à¥à¤¡', 'error');
        }
    }

    handleSignup() {
        const name = document.getElementById('signupName').value;
        const email = document.getElementById('signupEmail').value;
        const mobile = document.getElementById('signupMobile').value;
        const password = document.getElementById('signupPassword').value;

        // Check if user already exists
        if (this.dataManager.getUserByEmail(email)) {
            this.showMessage('à¤¯à¤¹ à¤ˆà¤®à¥‡à¤² à¤ªà¤¹à¤²à¥‡ à¤¸à¥‡ à¤ªà¤‚à¤œà¥€à¤•à¥ƒà¤¤ à¤¹à¥ˆ', 'error');
            return;
        }

        const user = { name, email, mobile, password };
        this.dataManager.addUser(user);
        this.dataManager.setCurrentUser(user);
        this.updateAuthUI();
        this.showPage('homepage');
        this.showMessage('à¤–à¤¾à¤¤à¤¾ à¤¸à¤«à¤²à¤¤à¤¾à¤ªà¥‚à¤°à¥à¤µà¤• à¤¬à¤¨à¤¾à¤¯à¤¾ à¤—à¤¯à¤¾!', 'success');
    }

    showAdminLoginForm() {
        this.showPage('loginPage');
        // Pre-fill admin credentials for easy access
        document.getElementById('loginEmail').value = adminCredentials.email;
        document.getElementById('loginPassword').value = adminCredentials.password;
        this.showMessage('à¤à¤¡à¤®à¤¿à¤¨ à¤•à¥à¤°à¥‡à¤¡à¥‡à¤‚à¤¶à¤¿à¤¯à¤² à¤­à¤°à¥‡ à¤—à¤ à¤¹à¥ˆà¤‚, à¤²à¥‰à¤—à¤¿à¤¨ à¤¬à¤Ÿà¤¨ à¤¦à¤¬à¤¾à¤à¤‚', 'info');
    }

    updateAuthUI() {
        const user = this.dataManager.getCurrentUser();
        const loginBtn = document.getElementById('loginBtn');
        
        if (user) {
            loginBtn.textContent = user.isAdmin ? 'à¤à¤¡à¤®à¤¿à¤¨ à¤²à¥‰à¤—à¤†à¤‰à¤Ÿ' : `à¤²à¥‰à¤—à¤†à¤‰à¤Ÿ (${user.name})`;
            loginBtn.classList.remove('btn--outline');
            loginBtn.classList.add('btn--secondary');
        } else {
            loginBtn.textContent = 'à¤²à¥‰à¤—à¤¿à¤¨';
            loginBtn.classList.remove('btn--secondary');
            loginBtn.classList.add('btn--outline');
        }
    }

    checkAuthState() {
        const user = this.dataManager.getCurrentUser();
        if (user && user.isAdmin) {
            this.showPage('adminDashboard');
        }
        this.updateAuthUI();
    }

    showCheckoutStep(stepId) {
        document.querySelectorAll('.checkout-step').forEach(step => {
            step.classList.remove('active');
        });
        document.getElementById(stepId).classList.add('active');
    }

    renderOrderSummary() {
        const cart = this.dataManager.getCart();
        const products = this.dataManager.getProducts();
        const container = document.getElementById('orderItems');
        
        let total = 0;
        const orderHTML = cart.map(item => {
            const product = products.find(p => p.id === item.productId);
            if (!product) return '';
            
            const itemTotal = product.price * item.quantity;
            total += itemTotal;

            return `
                <div class="order-item">
                    <span>${product.name} x ${item.quantity}</span>
                    <span>â‚¹${itemTotal}</span>
                </div>
            `;
        }).join('');

        container.innerHTML = orderHTML;
        document.getElementById('finalAmount').textContent = total;
    }

    processPayment() {
        const customerName = document.getElementById('customerName').value;
        const customerMobile = document.getElementById('customerMobile').value;
        const customerAddress = document.getElementById('customerAddress').value;
        const upiId = document.getElementById('upiId').value;
        const user = this.dataManager.getCurrentUser();

        // Show processing message
        this.showMessage('à¤­à¥à¤—à¤¤à¤¾à¤¨ à¤ªà¥à¤°à¤•à¥à¤°à¤¿à¤¯à¤¾ à¤œà¤¾à¤°à¥€ à¤¹à¥ˆ...', 'info');

        // Simulate payment processing
        setTimeout(() => {
            const cart = this.dataManager.getCart();
            const products = this.dataManager.getProducts();
            
            let total = 0;
            const orderItems = cart.map(item => {
                const product = products.find(p => p.id === item.productId);
                const itemTotal = product.price * item.quantity;
                total += itemTotal;
                return {
                    productId: item.productId,
                    productName: product.name,
                    quantity: item.quantity,
                    price: product.price,
                    total: itemTotal
                };
            });

            const order = {
                userId: user.email,
                customerName,
                customerMobile,
                customerAddress,
                upiId,
                items: orderItems,
                total,
                status: 'Confirmed'
            };

            this.dataManager.addOrder(order);
            this.dataManager.clearCart();
            this.updateCartCount();
            
            // Show confirmation
            document.getElementById('orderDetails').innerHTML = `
                <h3>à¤‘à¤°à¥à¤¡à¤° ID: #${order.id}</h3>
                <p><strong>à¤—à¥à¤°à¤¾à¤¹à¤•:</strong> ${customerName}</p>
                <p><strong>à¤®à¥‹à¤¬à¤¾à¤‡à¤²:</strong> ${customerMobile}</p>
                <p><strong>à¤ªà¤¤à¤¾:</strong> ${customerAddress}</p>
                <p><strong>à¤•à¥à¤² à¤°à¤¾à¤¶à¤¿:</strong> â‚¹${total}</p>
                <p><strong>à¤­à¥à¤—à¤¤à¤¾à¤¨ à¤µà¤¿à¤§à¤¿:</strong> UPI (${upiId})</p>
            `;
            
            this.showPage('confirmationPage');
            this.showMessage('à¤‘à¤°à¥à¤¡à¤° à¤¸à¤«à¤²à¤¤à¤¾à¤ªà¥‚à¤°à¥à¤µà¤• à¤ªà¥à¤²à¥‡à¤¸ à¤¹à¥à¤†!', 'success');
        }, 2000);
    }

    // Admin functionality
    renderAdminDashboard() {
        this.showAdminSection('products');
    }

    showAdminSection(sectionId) {
        // Update nav
        document.querySelectorAll('.admin-nav-link').forEach(link => {
            link.classList.remove('active');
        });
        const activeLink = document.querySelector(`[data-section="${sectionId}"]`);
        if (activeLink) {
            activeLink.classList.add('active');
        }

        // Show section
        document.querySelectorAll('.admin-section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(`admin${sectionId.charAt(0).toUpperCase() + sectionId.slice(1)}`).classList.add('active');

        // Load section data
        if (sectionId === 'products') {
            this.renderAdminProducts();
        } else if (sectionId === 'orders') {
            this.renderAdminOrders();
        } else if (sectionId === 'customers') {
            this.renderAdminCustomers();
        }
    }

    renderAdminProducts() {
        const container = document.getElementById('adminProductsGrid');
        const products = this.dataManager.getProducts();

        container.innerHTML = products.map(product => `
            <div class="admin-product-card">
                <img src="${product.image}" alt="${product.name}" class="admin-product-image" loading="lazy">
                <div class="admin-product-info">
                    <h3>${product.name}</h3>
                    <p class="admin-product-price">â‚¹${product.price}</p>
                    <p><strong>à¤¶à¥à¤°à¥‡à¤£à¥€:</strong> ${product.category}</p>
                    <p>${product.description}</p>
                    <div class="admin-product-actions">
                        <button class="btn btn--sm btn--danger" onclick="app.deleteProduct(${product.id})">
                            à¤¡à¤¿à¤²à¥€à¤Ÿ
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    renderAdminOrders() {
        const container = document.getElementById('adminOrdersList');
        const orders = this.dataManager.getOrders();

        if (orders.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>à¤•à¥‹à¤ˆ à¤‘à¤°à¥à¤¡à¤° à¤¨à¤¹à¥€à¤‚ à¤®à¤¿à¤²à¤¾</h3>
                    <p>à¤œà¤¬ à¤—à¥à¤°à¤¾à¤¹à¤• à¤‘à¤°à¥à¤¡à¤° à¤•à¤°à¥‡à¤‚à¤—à¥‡ à¤¤à¥‹ à¤µà¥‡ à¤¯à¤¹à¤¾à¤ à¤¦à¤¿à¤–à¥‡à¤‚à¤—à¥‡</p>
                </div>
            `;
            return;
        }

        container.innerHTML = orders.reverse().map(order => `
            <div class="admin-order-item">
                <div class="admin-order-header">
                    <span class="order-id">à¤‘à¤°à¥à¤¡à¤° #${order.id}</span>
                    <span class="order-total">â‚¹${order.total}</span>
                </div>
                <div class="order-details">
                    <p><strong>à¤—à¥à¤°à¤¾à¤¹à¤•:</strong> ${order.customerName}</p>
                    <p><strong>à¤®à¥‹à¤¬à¤¾à¤‡à¤²:</strong> ${order.customerMobile}</p>
                    <p><strong>à¤ªà¤¤à¤¾:</strong> ${order.customerAddress}</p>
                    <p><strong>à¤¦à¤¿à¤¨à¤¾à¤‚à¤•:</strong> ${new Date(order.date).toLocaleString('hi-IN')}</p>
                    <div class="order-items">
                        <strong>à¤†à¤‡à¤Ÿà¤®:</strong>
                        ${order.items.map(item => `
                            <div>${item.productName} x ${item.quantity} = â‚¹${item.total}</div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `).join('');
    }

    renderAdminCustomers() {
        const container = document.getElementById('adminCustomersList');
        const users = this.dataManager.getUsers();

        if (users.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>à¤•à¥‹à¤ˆ à¤—à¥à¤°à¤¾à¤¹à¤• à¤ªà¤‚à¤œà¥€à¤•à¥ƒà¤¤ à¤¨à¤¹à¥€à¤‚</h3>
                    <p>à¤œà¤¬ à¤—à¥à¤°à¤¾à¤¹à¤• à¤¸à¤¾à¤‡à¤¨ à¤…à¤ª à¤•à¤°à¥‡à¤‚à¤—à¥‡ à¤¤à¥‹ à¤µà¥‡ à¤¯à¤¹à¤¾à¤ à¤¦à¤¿à¤–à¥‡à¤‚à¤—à¥‡</p>
                </div>
            `;
            return;
        }

        container.innerHTML = users.map(user => `
            <div class="admin-customer-item">
                <div class="admin-customer-header">
                    <span class="customer-name">${user.name}</span>
                    <span class="customer-email">${user.email}</span>
                </div>
                <p><strong>à¤®à¥‹à¤¬à¤¾à¤‡à¤²:</strong> ${user.mobile}</p>
            </div>
        `).join('');
    }

    handleAddProduct() {
        const name = document.getElementById('newProductName').value.trim();
        const price = parseInt(document.getElementById('newProductPrice').value);
        const category = document.getElementById('newProductCategory').value;
        const image = document.getElementById('newProductImage').value.trim();
        const description = document.getElementById('newProductDescription').value.trim();

        // Validation
        if (!name || !price || !image || !description) {
            this.showMessage('à¤•à¥ƒà¤ªà¤¯à¤¾ à¤¸à¤­à¥€ à¤«à¤¼à¥€à¤²à¥à¤¡ à¤­à¤°à¥‡à¤‚', 'error');
            return;
        }

        if (price <= 0) {
            this.showMessage('à¤•à¥ƒà¤ªà¤¯à¤¾ à¤¸à¤¹à¥€ à¤¦à¤¾à¤® à¤¦à¤°à¥à¤œ à¤•à¤°à¥‡à¤‚', 'error');
            return;
        }

        const product = { name, price, category, image, description };
        this.dataManager.addProduct(product);
        
        this.hideModal('addProductModal');
        this.renderAdminProducts();
        this.showMessage('à¤¨à¤¯à¤¾ à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤œà¥‹à¤¡à¤¼à¤¾ à¤—à¤¯à¤¾', 'success');
        
        // Reset form
        document.getElementById('addProductForm').reset();
    }

    deleteProduct(id) {
        if (confirm('à¤•à¥à¤¯à¤¾ à¤†à¤ª à¤µà¤¾à¤•à¤ˆ à¤‡à¤¸ à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤•à¥‹ à¤¡à¤¿à¤²à¥€à¤Ÿ à¤•à¤°à¤¨à¤¾ à¤šà¤¾à¤¹à¤¤à¥‡ à¤¹à¥ˆà¤‚?')) {
            this.dataManager.deleteProduct(id);
            this.renderAdminProducts();
            this.showMessage('à¤‰à¤¤à¥à¤ªà¤¾à¤¦ à¤¡à¤¿à¤²à¥€à¤Ÿ à¤•à¤¿à¤¯à¤¾ à¤—à¤¯à¤¾', 'success');
        }
    }

    showModal(modalId) {
        const modal = document.getElementById(modalId);
        modal.classList.remove('hidden');
        // Focus the first input in the modal
        const firstInput = modal.querySelector('input, textarea, select');
        if (firstInput) {
            firstInput.focus();
        }
    }

    hideModal(modalId) {
        document.getElementById(modalId).classList.add('hidden');
    }

    showMessage(text, type = 'info') {
        const existingMessage = document.querySelector('.message');
        if (existingMessage) {
            existingMessage.remove();
        }

        const message = document.createElement('div');
        message.className = `message message--${type}`;
        message.textContent = text;
        message.style.position = 'fixed';
        message.style.top = '20px';
        message.style.right = '20px';
        message.style.zIndex = '10000';
        message.style.maxWidth = '300px';
        
        document.body.appendChild(message);
        
        setTimeout(() => {
            if (message.parentNode) {
                message.remove();
            }
        }, 4000);
    }
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.app = new NexaaraApp();
});
